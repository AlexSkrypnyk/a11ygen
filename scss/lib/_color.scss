@use "sass:math";

@import "decimal";

@function color-contrast-ratio($c1, $c2, $ratio: 0.05) {
  $c1-lum: color-luminance($c1) +  0.05;
  $c2-lum: color-luminance($c2) +  0.05;

  @if $c2-lum > $c1-lum {
    $ratio: math.div($c2-lum, $c1-lum);
  } @else {
    $ratio: math.div($c1-lum, $c2-lum);
  }

  $ratio: decimal-round($ratio, 2);

  @return $ratio;
}

@function color-is-light($color) {
  @return color-contrast-ratio($color, #fff) < color-contrast-ratio($color, #000);
}

@function color-luminance($c) {
  $rlin: color-de-gamma(math.div(red($c), 255));
  $glin: color-de-gamma(math.div(green($c), 255));
  $blin: color-de-gamma(math.div(blue($c), 255));
  @return 0.2126 * $rlin + 0.7152 * $glin + 0.0722 * $blin;
}

@function color-de-gamma($n) {
  @if $n <= 0.03928 {
    @return math.div($n, 12.92);
  } @else {
    @return math.pow((math.div(($n + 0.055), 1.055)), 2.4);
  }
}

@function color-contrast-string($c1, $c2, $ratio, $ok: ' \1F197', $fail: '\274C'){
  $cr: color-contrast-ratio($c1, $c2);
  $cr: decimal-round($cr, 2);
  @if $cr >= $ratio {
    $cr: $cr + $ok;
  }
  @else {
    $cr: $cr + $fail;
  }
  @return $cr;
}

@function color-normalize-string($color) {
  $color-string: $color + '';

  $color-string: str-slice(#{to-lower-case($color-string)}, 2);

  @if str-length($color-string) == 6 {
    @return $color;
  }

  @if str-length($color-string) == 3 {
    $r: str-slice($color-string, 1, 1);
    $g: str-slice($color-string, 2, 2);
    $b: str-slice($color-string, 3, 3);
    @return '#' + unquote("#{$r}#{$r}#{$g}#{$g}#{$b}#{$b}");
  }

  @return $color;
}
